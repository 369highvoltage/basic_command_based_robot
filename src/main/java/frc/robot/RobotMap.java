// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

//import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.SerialPort;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController robotHangerleftGHMotor;
    public static SpeedController robotHangerrightGHMotor;
    
    public static SpeedController leftFrontDriveMotor;
    public static SpeedController leftRearDriveMotor;
    public static SpeedController rightFrontDriveMotor;
    public static SpeedController rightRearDriveMotor;
    
    public static DoubleSolenoid gearSwitcher;
    public static DoubleSolenoid gearHandler;
    public static DoubleSolenoid gearClaw;
    
    public static Encoder leftEncoder;
    public static Encoder rightEncoder;
    
   // public static AHRS navX_Gyro;
    public static ADXRS450_Gyro gyro;
    
    //constants
    public static double LEFT_GO_MAX =  -1.0;                    	   //0.94;
    public static double RIGHT_GO_MAX = -0.97;							//0.97;
    public static double LEFT_BACK_MAX = 1.0;							//-0.97;
    public static double RIGHT_BACK_MAX = 0.97; 						//-0.94;
    
    public static Relay LEDSys;
    
   // public static Solenoid
    
    // public static RobotDrive driveSystem;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // robotHangerleftGHMotor = new Talon(4);
        // LiveWindow.addActuator("RobotHanger", "leftGHMotor", (Talon) robotHangerleftGHMotor);
        
        // robotHangerrightGHMotor = new Talon(5);
        // LiveWindow.addActuator("RobotHanger", "rightGHMotor", (Talon) robotHangerrightGHMotor);
        
        // leftFrontDriveMotor = new Talon(0);
        // leftRearDriveMotor = new Talon(1);
        // rightFrontDriveMotor = new Talon(2);
        // rightRearDriveMotor = new Talon(3);
        
        // LiveWindow.addActuator("DriveSystem", "leftFrontDriveMotor", (Talon) leftFrontDriveMotor);
        // LiveWindow.addActuator("DriveSystem", "leftRearDriveMotor", (Talon) leftRearDriveMotor);
        // LiveWindow.addActuator("DriveSystem", "rightFrontDriveMotor", (Talon) rightFrontDriveMotor);
        // LiveWindow.addActuator("DriveSystem", "rightRearDriveMotor", (Talon) rightRearDriveMotor);
       
        // driveSystem = new RobotDrive(leftFrontDriveMotor, leftRearDriveMotor, rightFrontDriveMotor, rightRearDriveMotor);
        // driveSystem.setExpiration(0.1);
        // driveSystem.setSafetyEnabled(false);

        // gearSwitcher = new DoubleSolenoid(0, 1);
        
        // gearHandler = new DoubleSolenoid(2, 3);
        
        // gearClaw = new DoubleSolenoid(4, 5);
        
        // leftEncoder = new Encoder(0,1);
        // leftEncoder.setReverseDirection(true);
        // leftEncoder.setDistancePerPulse(0.105);
        // rightEncoder = new Encoder(2,3);
        
        
        
        // gyro = new ADXRS450_Gyro();
        
        // LEDSys = new Relay(0);
        
        /*
        try {
            /* Communicate w/navX-MXP via the MXP SPI Bus.                                     */
            /* Alternatively:  I2C.Port.kMXP, SerialPort.Port.kMXP or SerialPort.Port.kUSB     */
            /* See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface/ for details. */
        //    navX_Gyro = new AHRS(I2C.Port.kMXP); 
       // } catch (RuntimeException ex ) {
          //  DriverStation.reportError("Error instantiating navX-MXP:  " + ex.getMessage(), true);
        //}
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}